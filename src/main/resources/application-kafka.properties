kafka.consumer.topic1=topic1
#kafka相关配置
spring.kafka.bootstrap-servers=127.0.0.1:9092
#设置一个默认组
spring.kafka.consumer.group-id=0
#key-value序列化反序列化
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#开启消费者自动提交、手动提交
spring.kafka.consumer.enable-auto-commit=false
#手动提交模式，自动提交无需配置
spring.kafka.listener.ack-mode=manual_immediate
#// 当每一条记录被消费者监听器（ListenerConsumer）处理之后提交
#RECORD,
#// 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交
#BATCH,
#// 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交
#TIME,
#// 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交
#COUNT,
#// TIME |　COUNT　有一个条件满足时提交
#COUNT_TIME,
#// 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后, 手动调用Acknowledgment.acknowledge()后提交
#MANUAL,
#// 手动调用Acknowledgment.acknowledge()后立即提交
#MANUAL_IMMEDIATE,
#每次批量发送消息的数量
spring.kafka.producer.batch-size=65536
spring.kafka.producer.buffer-memory=524288